enum SubmissionPhase {
    Pending => "pending",
    Saved => "saved",
    Revision => "revision",
    Submitted => "submitted",
    Decision => "decision",
    Payment => "payment",
    SkipPayment => "skip-payment",
    Paid => "paid",
    Publish => "publish",
    Reject => "reject",
    Published => "published",
    Cancelled => "cancelled"
}

enum SubmissionKind {
    Original => "original",
    Retrospective => "retrospective",
    Review => "review",
    Letter => "letter",
    Draft => "draft",
    Special => "special"
}

mapping "DisplayedSubmissionKind" on SubmissionKind {
    Original => "Original Article",
    Retrospective => "Retrospective Article",
    Review => "Review",
    Letter => "Letter",
    Draft => "Draft",
    Special => "Special Issue"
}


enum SupplementaryFileTypes {
    Figure => "figure",
    DataSet => "data-set"
}

mapping "DisplayedSupplementaryFileTypes" on SupplementaryFileTypes {
    Figure => "Figure",
    DataSet => "Data Set"
}


enum IUPSCommissionKind {
    Locomotion => "locomotion",
    CirculationRespiration => "circulation_and_respiration",
    EndocrineReproductionDevelopment => "endocrine_reproduction_and_development",
    Neurobiology => "Neurobiology",
    SecretionAbsorption => "secretion_and_absorption",
    MolecularCellular => "molecular_and_cellular",
    ComparativeEvolutionAdaptationEnvironment => "comparative_evolution_adaptation_environment",
    GenomicsBiodiversity => "genomics_and_biodiversity"
}

mapping "DisplayedIUPSCommissionKinds" on IUPSCommissionKind {
    Locomotion => "I. Locomotion",
    CirculationRespiration => "II. Circulation & Respiration",
    EndocrineReproductionDevelopment => "III. Endocrine, Reproduction & Development",
    Neurobiology => "IV. Neurobiology",
    SecretionAbsorption => "V. Secretion & Absorption",
    MolecularCellular => "VI. Molecular & Cellular",
    ComparativeEvolutionAdaptationEnvironment => "VII. Comparative: Evolution, Adaptation & Environment",
    GenomicsBiodiversity => "VIII. Genomics & Biodiversity"
}


enum RejectionReason {
    OutOfScope => "out-of-scope",
    Other => "other"
}

mapping "DisplayedRejectionReason" on RejectionReason {
    OutOfScope => "Out of scope",
    Other => "Other"
}


enum ModelSourceType {
    PMRWorkspace => "pmr-workspace",
    OtherRepository => "other-workspace",
    UserUploaded => "user-uploaded"
}

mapping "DisplayedModelSourceType" on ModelSourceType {
    PMRWorkspace => "PMR Workspace",
    OtherRepository => "Link to External Repository",
    UserUploaded => "Manually Uploaded Model"
}



extension "physiome-model-extensions"

instance Submission {

    processKey: "physiome-submission"
    listingAccessor: "submissions"

    model+input {
        manuscriptId: String <id-sequence:"manuscript_id">,
        submitter: Identity <owner-id, join-field:"submitterId">,
        curator: Identity <join-field:"curatorId">,

        submissionDate: DateTime <listing-sortable, input:exclude>,
        publishDate: DateTime <listing-sortable, input:exclude>,
        lastPublishDate: DateTime <listing-sortable, input:exclude>,
        unpublishedChanges: Boolean <default:false>,

        phase: SubmissionPhase <state, input:exclude, listing-filter-multiple, default:SubmissionPhase.Pending>,
        hidden: Boolean <listing-filter, default:false>,
        rejectionReason: RejectionReason,
        rejectionOther: String,
        revisionsNote: String,

        kind: SubmissionKind <default:SubmissionKind.Original>,
        iupsCommission: IUPSCommissionKind,
        title: String,
        abstract: String,
        primaryPapers: JSON,
        authors: JSON,
        priceAcknowledged: Boolean,
        keywords: JSON,
        funding: JSON,

        modelSource: ModelSourceType <default:ModelSourceType.PMRWorkspace>,
        modelPmrWorkspaceUri: String,
        modelRepositoryUri: String,
        modelFiles: [File] <set>,

        allFilesPresent: Boolean,
        resultsMatch: Boolean,
        modelAnnotated: Boolean,
        primaryPaperExists: Boolean,
        resultsInPapersOverlap: Boolean,
        sameModelInPapers: Boolean,
        manuscriptAccepted: Boolean,

        suitableForPhysiome: Boolean,
        manuscriptFormatted: Boolean,
        modelImplExecutable: Boolean,
        reprodGoalAchieved: Boolean,
        modelReproducible: Boolean,
        modificationExplained: Boolean,
        modelAppropriateStandards: Boolean,
        paramSourceStated: Boolean,
        provenanceClear: Boolean,
        overlapPaperManuscriptCode: Boolean,
        articleFitForPublication: Boolean,

        paymentSkipped: Boolean <state, input:exclude, default:false>,
        curationNotes: String,

        articleFiles: [File] <set>,
        supplementaryFiles: [File] <set, file-labels, file-types>,

        figshareFiles: [File] <set>,

        figshareArticleType: String <input:exclude>,
        figshareArticleId: String <input:exclude>,
        figshareArticleDoi: String <input:exclude>,
        publishingPmrDetails: JSON,

        paymentAmount: Integer <default:300>,
        paymentSessionId: String <input:exclude>,
        paymentCompleted: Boolean <input:exclude, default:false>
    }


    acl {

        fields "submit" {
    	    kind, title, abstract, primaryPapers, authors, funding,
    	    keywords, iupsCommission,
    	    modelSource, modelPmrWorkspaceUri, modelRepositoryUri, modelFiles,
    	    articleFiles, supplementaryFiles,
            priceAcknowledged
        }

        fields "read-only" {
            phase, manuscriptId, submitter, submissionDate, figshareArticleDoi,
            publishDate, figshareArticleId, revisionsNote
        }

        fields "payment-fields" {
            paymentAmount
        }

        fields "curation" {
            hidden, unpublishedChanges, rejectionReason, rejectionOther, revisionsNote,
    	    allFilesPresent, resultsMatch, primaryPaperExists, resultsInPapersOverlap, sameModelInPapers, manuscriptAccepted,
    	    curator, curationNotes,

            suitableForPhysiome, manuscriptFormatted, modelImplExecutable, reprodGoalAchieved, modelReproducible, modificationExplained, modelAppropriateStandards, paramSourceStated, provenanceClear, overlapPaperManuscriptCode, articleFitForPublication, modelAnnotated,

            publishingPmrDetails, figshareFiles
        }

        tasks "owner-submit" {
    	    "Task_DetailsSubmission",
    	    "Task_SavedForLater",
    	    "Task_RevisionNeeded"
        }

        allow <user> [create]
        allow <user> [access:own]
        allow <owner> [access:own]
        allow <administrator> [access:all]

        allow <owner> [read] on "submit"
        allow <owner> [read] on "read-only"
        allow <owner> [write] on "submit" where (phase == SubmissionPhase.Pending || phase == SubmissionPhase.Saved || phase == SubmissionPhase.Revision)
        allow <owner> [task] on "owner-submit"
        allow <owner> [destroy] where (phase == SubmissionPhase.Pending || phase == SubmissionPhase.Saved)

        allow <administrator> [write, read] on "submit"
        allow <administrator> [write, read] on "curation"
        allow <administrator> [write, read] on "payment-fields"
        allow <administrator> [read] on "read-only"
        allow <administrator> [create, destroy]
        allow <administrator> [task]
    }


    validations "initial-submission" {

        { kind => (hasValue(kind)), "A manuscript type is required. Please select one." }

        { title => (length(title) > 0), "A manuscript title is required. Please enter one." }

        { abstract => (length(abstract) > 0), "A manuscript abstract is required. Please enter one." }

        { iupsCommission => (hasValue(iupsCommission)), "A manuscript commission type is required. Please select one." }


        { articleFiles => (fileCount(articleFiles) > 0), "At least one manuscript file needs to be uploaded for your submission. Please upload a file." }


        { primaryPapers => (kind == SubmissionKind.Review || length(primaryPapers) > 0), "At least one primary paper citation is required. Please add an article citation for a primary paper." }

        { primaryPapers => (kind == SubmissionKind.Review || length(primaryPapers) == 0 || validCitations(primaryPapers) > 0), "At minimum one valid primary paper article citation is required." }


        { authors => (length(authors) > 0), "At least one author is required. Please add an author." }

        { authors => (length(authors) == 0 || correspondingAuthors(authors) > 0), "At least one corresponding author is required. Please mark an existing author as being a corresponding author or add an additional author who is marked as a corresponding author." }

        { authors => (length(authors) == 0 || correspondingAuthors(authors) == 0 || singleCorrespondingAuthor(authors)), "Only one author can be a corresponding author. Please mark only a single author as being a corresponding author." }


        { priceAcknowledged => (priceAcknowledged == true), "You must acknowledge your acceptance of the associated curation fee associated with the submission." }


        { modelFiles => (modelSource != ModelSourceType.UserUploaded || fileCount(modelFiles) > 0), "At least one model file needs to be uploaded for your submission. Please upload a file." }

        { modelPmrWorkspaceUri => (modelSource != ModelSourceType.PMRWorkspace || validUri(modelPmrWorkspaceUri)), "A valid PMR workspace location must be specified. Please enter a valid URL above." }

        { modelRepositoryUri => (modelSource != ModelSourceType.OtherRepository || validUri(modelRepositoryUri)), "A valid repository location must be specified. Please enter a valid URL above." }
    }


    layout "submission-editor" {

        { SelectValue => kind, label:"Manuscript Type", options:mapping("DisplayedSubmissionKind"), placeholder:"Please select a Manuscript type",
            message:"Read more about of types of articles <a target='_blank' rel='noopener noreferrer' href='https://journal.physiomeproject.org/instructions-to-authors.html'>here</a>."}

        { TextArea => title, label:"Title", rows:2 }

        { TextArea => abstract, label:"Abstract", rows:6 }

        { ArticleCitationListEditor => primaryPapers, (kind != SubmissionKind.Review), label:"Primary Papers", note:"The primary publication is an experimental/modelling paper with model validation that has been accepted to a peer-reviewed physiology, bioengineering or biophysics journal. Every Physiome paper needs to be associated with at least one primary paper." }

        { AuthorsEditor => authors, label:"Authors", note:"Decide the order of the authors by dragging and dropping the corresponding author box. There can only be one corresponding author per submission." }

        { SelectValue => iupsCommission, label:"Commission Type", options:mapping("DisplayedIUPSCommissionKinds"), placeholder:"Please select a Commission",
            message:"Commissions detailed by IUPS: <a target='_blank' rel='noopener noreferrer' href='http://www.iups.org/about-us/commissions/'>http://www.iups.org/about-us/commissions/</a>"
        }

        { KeywordsEditor => keywords, label:"Keywords", placeholder:"Keywords associated with manuscript. Press 'Enter' to confirm each keyword" }

        { FundingEditor => funding, label:"Funding Acknowledgements" }

        { FileUploader => articleFiles, label:"Manuscript", accept:"application/pdf, x-pdf, application/zip", help:"Please submit the PDF manuscript or an Overleaf zip export file in this section, even if it is included in your workspace. A template for Physiome manuscripts can be found <a target='_blank' rel='noopener noreferrer' href='https://www.overleaf.com/5969134891vcddxjnnfzfh'>here</a>." }

        { Group, heading:"Model Files", children: {

            { SelectValue => modelSource, label:"File Location Type", options:mapping("DisplayedModelSourceType"), placeholder:"Please select a file location type" }

            { Text => modelPmrWorkspaceUri, (modelSource == ModelSourceType.PMRWorkspace), label:"PMR Workspace URL" }

            { Text => modelRepositoryUri, (modelSource == ModelSourceType.OtherRepository), label:"Repository URL" }

            { FileUploader => modelFiles, (modelSource == ModelSourceType.UserUploaded), label:"Model Files" }

            { Note, message:"You can either provide a link to a workspace in an open, version controlled repository where our curators can access the files present at the time of submission without creating an account, or submit your files directly below. If you are not already using a repository, we recommend the Physiome Model Repository (<a target='_blank' rel='noopener noreferrer' href='https://models.physiomeproject.org/'>https://models.physiomeproject.org/</a>), which is already tied to this journal. If you provide a link to a workspace, the files present in the workspace at the time of submission will be curated, and later changes will not be taken into regard." }
        } }

        { FileUploader => supplementaryFiles, label:"Supplementary Files",
            fileLabels:true, fileTypes:mapping("DisplayedSupplementaryFileTypes") }
    }


    layout "submission-view" {

        { StaticText => kind, label:"Article Type", mapping:mapping("DisplayedSubmissionKind") }

        { StaticText => title, label:"Title" }

        { StaticText => abstract, label:"Abstract" }

        { AuthorsListing => authors, label:"Authors" }

        { ArticleCitationListing => primaryPapers, (kind != SubmissionKind.Review), label:"Primary Papers" }

        { StaticText => iupsCommission, label:"Commission Type", mapping:mapping("DisplayedIUPSCommissionKinds") }

        { KeywordsListing => keywords, label:"Keywords" }

        { FundingListing => funding, label:"Funding Acknowledgements" }

        { FilesListing => articleFiles, label:"Manuscript Files" }

        { StaticText => modelPmrWorkspaceUri, (modelSource == ModelSourceType.PMRWorkspace), label:"PMR Workspace URL", url:true }

        { StaticText => modelRepositoryUri, (modelSource == ModelSourceType.OtherRepository), label:"Repository URL", url:true }

        { FilesListing => modelFiles, (modelSource == ModelSourceType.UserUploaded), label:"Model Files" }


        { FilesListing => supplementaryFiles, label:"Supplementary Files" }
    }


    layout "admin-submission-view" {

        { Layout, layout:"submission-view" }

        { FilesListing => figshareFiles, (phase in [SubmissionPhase.Published, SubmissionPhase.Publish]), label: "Figshare Collection" }

        { FileUploader => figshareFiles, (phase in [SubmissionPhase.Paid, SubmissionPhase.SkipPayment]), label:"Figshare Collection", accept:"application/pdf, x-pdf, application/zip", help:"Please upload the PDF of the final paper, and then the zip file containing the files to be uploaded as the final Figshare collection." }

    }


    layout "admin-submission-editor" {

        { ShadowedEditor, unpublishedChangesFlagField:"unpublishedChanges", children:{

            { Layout, layout:"submission-editor" }

            { FileUploader => figshareFiles, label:"Figshare Collection", accept:"application/pdf, x-pdf, application/zip", help:"Please upload the PDF of the final paper, and then the zip file containing the files to be uploaded as the final Figshare collection." }

        } }


    }


    view "details" extend "MasterDetailEditor" {

        elements: {

            { HeaderPanel, (phase == SubmissionPhase.Payment), children:{

                { RequestPaymentBanner }

            } }

            { MasterPanel, <administrator>, children:{

                { ViewerEditorLayout, heading:"Manuscript Details", viewLabel:"View Submission", editLabel:"Edit Submission", children:{

                    { Layout, layout:"admin-submission-view" }

                    { Layout, layout:"admin-submission-editor" }

                } }

            } }

            { MasterPanel, <not:administrator>, children:{

                { Layout, layout:"submission-view" }

            } }

            { MasterPanel, <administrator>, (phase == SubmissionPhase.Published), heading:"Published Article", children:{

                { FishareArticleEmbed => figshareArticleId }

            } }


            { DetailPanel, children:{

                { BannerMessage, <administrator>, (phase == SubmissionPhase.Published && unpublishedChanges == true), message:"Unpublished Changes" }

                { StaticText => manuscriptId, label:"Manuscript ID" }

                { SubmissionStatusPill => phase, label:"Submission Status" }

                { ClaimSubmission => curator, <administrator>, label:"Assigned Curator" }

                { StaticText => submissionDate, label:"Submission Date", format:"MMM DD, YYYY h:mm:ss a" }

                { StaticText => publishDate, (phase == SubmissionPhase.Published), label:"Published Date", format:"MMM DD, YYYY h:mm:ss a" }

                { StaticText => figshareArticleDoi, (hasValue(figshareArticleDoi) == true), label: "Article DOI" }

                { TextArea => curationNotes, <administrator>, label:"Notes", small:true, rows:7 }

                { Checkbox => hidden, <administrator>, (phase in [SubmissionPhase.Submitted, SubmissionPhase.Decision]), label:"Place submission on-hold",
                    help: "Will hide submission from the active list. Use only if the authors cease communication for more than 4 weeks." }
            } }

            { DetailPanel, <administrator>, (phase == SubmissionPhase.Submitted), heading:"Curation Checks", children:{

                { Checkbox => suitableForPhysiome, label: "Submission suitable for Physiome.", showAsRequired: false, help: "<p>Editor responsible.</p><ul><li>In scope.</li><li>Primary Paper exists and is peer reviewed or under review. If letter, it should refer to a previous Physiome Paper.</li><li>Author overlap with primary paper.</li><li>Manuscript readable (proper language, good order, coherent).</li><li>Manuscript is written using Physiome template.</li></ul>" }
                { Checkbox => manuscriptFormatted, label: "Manuscript correctly formatted.", showAsRequired: false, help: "<p>Curator responsible.</p><ul><li>All figures are before the references (except appendices).</li><li>All authors correctly formatted, including capitals and initials.<br /></li><li>All authors have affiliations, and the affiliations correctly formatted.</li><li>The countries are not abbreviated in the affiliations.</li><li>Keywords present and make sense.</li><li>Corresponding author marked with an asterisk and their email supplied.</li><li>References have the correct format.</li></ul>" }
                { Checkbox => modelImplExecutable, label: "Model implementation executable.", showAsRequired: false, help: "<p>Curator responsible.</p><ul><li>All files needed to run the model are supplied.</li><li>SedML or python script for plotting present.</li><li>Manuscript contains all information needed to run the scripts.</li><li>Model produces the results presented in the manuscript, both reproduced results and additional predictions.</li><li>Software, versions, modules, libraries, settings, time steps, algorithms, etc are stated in the manuscript.</li></ul>" }
                { Checkbox => reprodGoalAchieved, label: "Reproducible targets clearly identified.", showAsRequired: false, help: "<p>Curator responsible.</p><ul><li>Reproducibility goals stated and overlap with Primary Paper.</li></ul>" }
                { Checkbox => modelReproducible, label: "Model is reproducible.", showAsRequired: false, help: "<p>Curator responsible.</p><ul><li>Model produces the results presented in the manuscript, both reproduced results and additional predictions.</li></ul>" }
                { Checkbox => modificationExplained, label: "Model modifications clearly explained.", showAsRequired: false, help: "<p>Curator responsible.</p><ul><li>Equations supplied for changes in the model from the Primary Paper (if needed).</li><li>Parameter sources stated.</li></ul>" }
                { Checkbox => modelAppropriateStandards, label: "Appropriate standards used.", showAsRequired: false, help: "<p>Curator responsible.</p><ul><li>Model is in standardised format or has a good reason not to be.</li><li>Documentation available, either as comments in the code or described in the paper.</li><li>Appropriate modularity.</li></ul>" }
                { Checkbox => paramSourceStated, label: "Parameter sources clearly identified.", showAsRequired: false, help: "<p>Curator responsible.</p><ul><li>Parameter sources clearly identified. Primary paper is sufficient as a source.</li></ul>" }
                { Checkbox => provenanceClear, label: "Provenance is clear.", showAsRequired: false, help: "<p>Curator responsible.</p><ul><li>Reference back to previous versions of the model. In a way that can be picked up by altmetrics etc.</li></ul>" }
                { Checkbox => overlapPaperManuscriptCode, label: "Overlap between Primary Paper - Manuscript - Code.", showAsRequired: false, help: "<p>Curator responsible.</p><ul><li>If all results overlap, check random equations.</li><li>If something seems fishy, start pulling on that thread. Check the code vs the equations more fully, and/or ask the authors about the discrepancy.</li></ul>" }
                { Checkbox => articleFitForPublication, label: "Article fit for publication.", showAsRequired: false, help: "<p>Editor responsible.</p><ul><li>Go through the curators evaluation and determine if the required goals for that type of model are fulfilled.</li><li>Publish after payment.</li></ul>" }
                { Checkbox => modelAnnotated, label: "Annotated model.", showAsRequred: false, help: "<p>Curator responsible.</p><ul><li>Model is fully annotated</li></ul>" }

            } }


            { DetailPanel, <administrator>,
                    (phase in [SubmissionPhase.Decision, SubmissionPhase.Revision, SubmissionPhase.Payment, SubmissionPhase.Paid, SubmissionPhase.SkipPayment,
                        SubmissionPhase.Publish, SubmissionPhase.Reject, SubmissionPhase.Published]),
                    heading:"Curation Checks", children:{

                { Checkbox => suitableForPhysiome, label: "Submission suitable for Physiome.", showAsRequired: false, readOnly: true }
                { Checkbox => manuscriptFormatted, label: "Manuscript correctly formatted.", showAsRequired: false, readOnly: true }
                { Checkbox => modelImplExecutable, label: "Model implementation executable.", showAsRequired: false, readOnly: true }
                { Checkbox => reprodGoalAchieved, label: "Reproducible targets clearly identified.", showAsRequired: false, readOnly: true }
                { Checkbox => modelReproducible, label: "Model is reproducible.", showAsRequired: false, readOnly: true }
                { Checkbox => modificationExplained, label: "Model modifications clearly explained.", showAsRequired: false, readOnly: true }
                { Checkbox => modelAppropriateStandards, label: "Appropriate standards used.", showAsRequired: false, readOnly: true }
                { Checkbox => paramSourceStated, label: "Parameter sources clearly identified.", showAsRequired: false, readOnly: true }
                { Checkbox => provenanceClear, label: "Provenance is clear.", showAsRequired: false, readOnly: true }
                { Checkbox => overlapPaperManuscriptCode, label: "Overlap between Primary Paper - Manuscript - Code.", showAsRequired: false, readOnly: true }
                { Checkbox => articleFitForPublication, label: "Article fit for publication.", showAsRequired: false, readOnly: true }
                { Checkbox => modelAnnotated, label: "Annotated model.", showAsRequired: false, readOnly:true }

            } }


            { DetailPanel, <administrator>,
                    (phase in [SubmissionPhase.Submitted,
                        SubmissionPhase.Decision, SubmissionPhase.Revision, SubmissionPhase.Payment, SubmissionPhase.Paid, SubmissionPhase.SkipPayment,
                        SubmissionPhase.Publish, SubmissionPhase.Reject, SubmissionPhase.Published]),
                    heading:"Deprecated Curation Checks", children:{

                { Checkbox => primaryPaperExists, label: "Primary paper exists", showAsRequired:true, readOnly:true }

                { Checkbox => sameModelInPapers, label: "Same model in manuscript and primary paper", showAsRequired:true, readOnly:true }

                { Checkbox => resultsMatch, label: "Results of the model match the results present in primary article", readOnly:true }

                { Checkbox => resultsInPapersOverlap, label: "Results in manuscript and primary paper overlap", showAsRequired:true, readOnly:true }

                { Checkbox => allFilesPresent, label: "All files are present within the model and successfully execute", showAsRequired:true, readOnly:true }

                { Checkbox => manuscriptAccepted, label: "Manuscript accepted", showAsRequired:true, readOnly:true }

            } }


            { DetailPanel, <administrator>, heading:"Published PMR Workspace", children: {

                { PMRWorkspaceDetails => publishingPmrDetails }

            } }

            { DetailPanel, <administrator>, (phase in [SubmissionPhase.Submitted, SubmissionPhase.Revision, SubmissionPhase.Decision, SubmissionPhase.Payment,
                                                            SubmissionPhase.Paid, SubmissionPhase.SkipPayment, SubmissionPhase.Reject]),
                    heading:"Decisions", children:{

                { InlineTaskForm, form:"decisions", tasks:[ "checks", "revisions", "payment-decision", "payment", "publish-decision" ] }

                { ResumeRejectedSubmission, (phase == SubmissionPhase.Reject) }

            } }

            { DetailPanel, <administrator>, (phase == SubmissionPhase.Published && unpublishedChanges == true),
                    heading:"Publishing", children:{

                { RepublishSubmission }

            } }

        }
    }


    form "submission" extend "SimplePanels" {

        validation: [ "initial-submission" ]

        outcomes: [
            {
                "complete" => Complete,
                state: {
                    phase: SubmissionPhase.Submitted
                },
                sequence => manuscriptId,
                dateAssignment => submissionDate = current(),

                requiresValidatedSubmitter: true
            },

            {
                "save-for-later" => Complete,
                 state: {
                     phase: SubmissionPhase.Saved
                 },

                 skipValidations: true
            },

            {
                "cancel" => Destroy,
                state: {
                    phase: SubmissionPhase.Cancelled
                }
            }
        ]

        options: {
           heading: "Manuscript Submission"
        }

        elements: {

            { Panel, children:{

                { Layout, layout:"submission-editor" }

                { HeroCheckbox => priceAcknowledged, heading:"Conditions of Submission",
                    label: "I understand that there is a curation processing fee of $300 USD associated with the successful acceptance of this manuscript." }

            } }

            { DecisionPanel, children:{

                { Button, outcome:"save-for-later", label:"Save for Later" }

                { Button, outcome:"cancel", label:"Cancel",
                    confirmation:"Are you sure you want to cancel this manuscript submission? The submission and any saved answers will be lost.",
                    confirmationHeading:"Cancel Manuscript Submission",
                    confirmationAffirmativeLabel: "Delete Submission", confirmationNegativeLabel: "Cancel"}

                { Button, default:true, outcome:"complete", label:"Submit" }

            } }
        }
    }

    form "revisions" extend "SimplePanels" {

        validation: [ "initial-submission" ]

        outcomes: [
            {
                "complete" => Complete,
                state: {
                    phase: SubmissionPhase.Submitted
                },
                requiresValidatedSubmitter: true
            },

            {
                "save-for-later" => Save,
                 skipValidations: true
            }
        ]

        options: {
           heading: "Manuscript Revision"
        }

        elements: {

            { Panel, children:{

                { StaticText => revisionsNote, label:"Revision Notes" }

                { Layout, layout:"submission-editor" }

                { HeroCheckbox => priceAcknowledged, heading:"Conditions of Submission",
                    label: "I understand that there is a curation processing fee of $300 USD associated with the successful acceptance of this manuscript." }

            } }

            { DecisionPanel, children:{

                { Button, outcome:"save-for-later", label:"Save for Later" }

                { Button, default:true, outcome:"complete", label:"Submit Revisions" }

            } }
        }
    }


    validations "rejection-reason" {

        { rejectionReason => (hasValue(rejectionReason) == true), "The kind of rejection being used must be specified. Choose 'Other' to write-in a reason not listed." }

        { rejectionOther => (rejectionReason != RejectionReason.Other || length(rejectionOther) > 0), "A rejection reason is required if you choose 'Other' as the rejection reason." }
    }

    validations "revision-note" {

        { revisionsNote => (length(revisionsNote) > 0), "A message to the submitter is required detailing what revisions are required." }
    }

    validations "payment-approval" {

        { paymentAmount => (paymentAmount >= 1 && paymentAmount <= 300), "The curation fee must be between 1-300" }

    }


    form "decisions" {

        outcomes: [
            {
                "payment" => Complete,
                state: {
                    phase: SubmissionPhase.Payment
                }
            },
            {
                "publish" => Complete,
                state: {
                    phase: SubmissionPhase.Publish
                }
            },
            {
                "revision" => Complete,
                state: {
                    phase: SubmissionPhase.Revision
                }
            },
            {
                "reject" => Complete,
                state: {
                    phase: SubmissionPhase.Reject
                }
            },
            {
                "checked" => Complete,
                state: {
                    phase: SubmissionPhase.Decision
                }
            },
            {
                "resume-checks" => Complete,
                state: {
                    phase: SubmissionPhase.Submitted
                }
            },
            {
                "skip-payment" => Complete,
                state: {
                    phase: SubmissionPhase.SkipPayment,
                    paymentSkipped: true
                }
            }
        ]

        elements: {

            { Button, (phase == SubmissionPhase.Submitted), outcome:"checked", label:"Checks Completed" }

            { Button, (phase == SubmissionPhase.Submitted), outcome:"revision", label:"Revisions Required",
                confirmation:"Are you sure you want to return this submission to the submitter requesting revisions?", confirmationHeading:"Manuscript Revisions Required",
                confirmationAffirmativeLabel: "Revise Manuscript", confirmationNegativeLabel: "Cancel", confirmationValidation:["revision-note"], children:{

                { TextArea => revisionsNote, placeholder:"Revision notes (sent to manuscript submitter)." }
            } }


            { Button, (phase == SubmissionPhase.Decision || phase == SubmissionPhase.Revision), outcome:"resume-checks", label:"Resume Quality Checks" }

            { Button, (phase == SubmissionPhase.Decision), outcome:"payment", label:"Approve for Payment",
                confirmation:"Are you sure you want to approve this submission for curation fee payment? The submitter will be emailed and asked to pay the curation processing charge.",
                confirmationHeading:"Request Curation Fee Payment", confirmationAffirmativeLabel: "Send Payment Request", confirmationNegativeLabel: "Cancel", confirmationValidation:["payment-approval"], children: {

                { Integer => paymentAmount, label: "Curation Fee (USD)" }

             } }

            { Button, (phase == SubmissionPhase.Decision), outcome:"skip-payment", label:"Waive Payment",
                confirmation:"Are you sure you want to approve this submission and also waive the payment of the APC fee?",
                confirmationHeading:"Waive APC Payment", confirmationAffirmativeLabel: "Waive APC Payment", confirmationNegativeLabel: "Cancel" }


            { Button, (phase == SubmissionPhase.Paid || phase == SubmissionPhase.SkipPayment), outcome:"publish", label:"Publish Article",
                confirmation:"Are you sure you want to publish this manuscript submission through into figshare?", confirmationHeading:"Publish Manuscript to Figshare",
                confirmationAffirmativeLabel: "Publish Manuscript", confirmationNegativeLabel: "Cancel" }


            { Button, (phase != SubmissionPhase.Reject), outcome:"reject", label:"Reject Article",
                confirmation:"Are you sure you want to reject this manuscript submission?", confirmationHeading:"Reject Manuscript Submission",
                confirmationAffirmativeLabel: "Reject Manuscript", confirmationNegativeLabel: "Cancel", confirmationValidation:["rejection-reason"], children:{

                { SelectValue => rejectionReason, label:"Reason for Rejection", options:mapping("DisplayedRejectionReason"), placeholder:"Please select the rejection reason kind" }

                { TextArea => rejectionOther, (rejectionReason == RejectionReason.Other), placeholder:"Further details for rejection (sent to manuscript submitter)." }
            } }

        }
    }

}
